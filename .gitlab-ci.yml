stages:
  - lint
  - test


variables:                         &default-vars
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CARGO_INCREMENTAL:               0
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  CI_IMAGE:                        "paritytech/ci-linux:production"

.rust-info-script:                 &rust-info-script
  - rustup show
  - cargo --version
  - rustup +nightly show
  - cargo +nightly --version
  - bash --version
  - sccache -s

.docker-env:                       &docker-env
  image:                           "${CI_IMAGE}"
  before_script:
    - *rust-info-script
    - ./scripts/ci/pre_cache.sh
    - sccache -s
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible:                   true
  tags:
    - linux-docker

.kubernetes-env:                   &kubernetes-env
  image:                           "${CI_IMAGE}"
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible:                   true
  tags:
    - kubernetes-parity-build

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     28 days
    paths:
      - ./artifacts/

#### stage:                        lint

fmt:
  stage:                           lint
  <<:                              *kubernetes-env
  script:
    # FIXME: remove after stable fmt added to ci-linux
    - rustup component add rustfmt
    - cargo fmt --all -- --check

clippy:
  stage:                           lint
  <<:                              *docker-env
  script:
    # FIXME: remove after stable clippy added to ci-linux
    - rustup component add clippy
    - cargo clippy --all-targets

check-rustdoc-links:
  stage:                           lint
  <<:                              *docker-env
  script:
    - RUSTDOCFLAGS="--deny broken_intra_doc_links" cargo doc --workspace --no-deps --document-private-items

#### stage:                       test

check-code:
  stage:                           test
  <<:                              *docker-env
  script:
    - cargo install cargo-hack
    - cargo hack check --workspace --each-feature

test:
  stage:                           test
  <<:                              *docker-env
  script:
    - cargo test

benchmarks:
  stage:                           test
  <<:                              *docker-env
  <<:                              *collect-artifacts
  rules:
    # run nightly by schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - cargo bench -p jsonrpsee-benchmarks -- --output-format bencher | output.txt
    - mkdir artifacts
    - cp output.txt artifacts/
